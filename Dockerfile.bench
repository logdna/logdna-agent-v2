FROM buildpack-deps:bullseye-curl

ENV CARGO_HOME="/opt/rust/cargo"
ENV RUSTUP_HOME="/opt/rust/rustup"
ENV PATH="${CARGO_HOME}/bin:${PATH}"

RUN DEPS='build-essential binutils ca-certificates curl file gcc g++ libtool m4 libc6-dev make xz-utils locales libexpat1-dev gettext libz-dev libssl-dev autoconf pkg-config bzip2 libsystemd-dev systemd lsof procps git cmake software-properties-common automake hunspell-en-gb hunspell-tools' \
  && apt-get update \
  && apt-get install -y --no-install-recommends $DEPS \
  && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
  && locale-gen en_US.UTF-8 \
  && /usr/sbin/update-locale LANG=en_US.UTF-8 \
  && apt-get remove --purge autoconf libz-dev libexpat1-dev -y \
  && apt-get autoremove -y \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc

# Install a musl cross compiler for x86_64 using musl-cross-make
RUN mkdir /tmp/musl-cross && cd /tmp/musl-cross && \
    curl --retry 3 -sSfL "https://github.com/richfelker/musl-cross-make/archive/v0.9.9.tar.gz" -O &&\
    tar --strip-components=1 -xzf "v0.9.9.tar.gz" && \
    echo "GCC_CONFIG += --enable-default-pie" >> config.mak && \
    make install "-j$(nproc)" \
        GCC_VER=9.2.0 \
        MUSL_VER=1.2.0 \
        BINUTILS_VER=2.33.1 \
        DL_CMD='curl --retry 3 -sSfL -C - -o' \
        LINUX_HEADERS_SITE=https://ci-mirrors.rust-lang.org/rustc/sabotage-linux-tarballs \
        OUTPUT=/usr/local/ \
        TARGET=x86_64-linux-musl && \
    make install "-j$(nproc)" \
        GCC_VER=9.2.0 \
        MUSL_VER=1.2.0 \
        BINUTILS_VER=2.33.1 \
        DL_CMD='curl --retry 3 -sSfL -C - -o' \
        LINUX_HEADERS_SITE=https://ci-mirrors.rust-lang.org/rustc/sabotage-linux-tarballs \
        OUTPUT=/usr/local/ \
        TARGET=aarch64-linux-musl && \
    rm -rf /tmp/musl-cross

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US
ENV TERM xterm

ARG VERSION="stable"

# Install an up to date llvm
COPY llvm-snapshot.gpg.key /llvm-snapshot.gpg.key
RUN apt update && apt install -y&& \
    apt-key add /llvm-snapshot.gpg.key && \
    add-apt-repository "deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-12 main" && \
    apt update -y && \
    apt install -y clang-12 llvm-12 lldb

# Install rust

ENV CARGO_HOME=/opt/rust/cargo
RUN curl https://sh.rustup.rs -sSf | \
    sh -s -- -y --default-toolchain $VERSION --component clippy rustfmt --profile minimal --no-modify-path && \
    chmod -R a+rw $RUSTUP_HOME $CARGO_HOME && \
    rustup target add x86_64-unknown-linux-musl && \
    rustup target add aarch64-unknown-linux-musl

RUN cargo install cargo-audit --version ~0.14

RUN cargo install sccache

ENV RUSTC_WRAPPER="/opt/rust/cargo/bin/sccache"

# Set up cargo env vars for cross compiling
ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc \
    CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \
    CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++ \
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc \
    CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc \
    CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++

# Install static openssl
ARG OPENSSL_VERSION=1.1.1l

RUN echo "Building OpenSSL" && \
    ls /usr/include/linux && \
    mkdir -p /usr/local/musl/include && \
    ln -s /usr/include/linux /usr/local/musl/include/linux && \
    ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm && \
    ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic && \
    cd /tmp && \
    short_version="$(echo "$OPENSSL_VERSION" | sed s'/[a-z]$//' )" && \
    curl -fLO "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz" || \
        curl -fLO "https://www.openssl.org/source/old/$short_version/openssl-$OPENSSL_VERSION.tar.gz" && \
    tar xvzf "openssl-$OPENSSL_VERSION.tar.gz" && cd "openssl-$OPENSSL_VERSION" && \
    env CC=x86_64-linux-musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 && \
    env C_INCLUDE_PATH=/usr/local/musl/include/ make depend && \
    env C_INCLUDE_PATH=/usr/local/musl/include/ make && \
    make install && \
    rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic && \
    rm -r /tmp/*

## Install static Zlib
ARG ZLIB_VERSION=1.2.11
RUN echo "Building zlib" && \
    cd /tmp && \
    curl -fLO "http://zlib.net/zlib-$ZLIB_VERSION.tar.gz" && \
    tar xzf "zlib-$ZLIB_VERSION.tar.gz" && cd "zlib-$ZLIB_VERSION" && \
    CC=aarch64-linux-musl-gcc ./configure --static --prefix=/usr/local/musl && \
    make && make install && \
    rm -r /tmp/*

# Install static Zlib
ARG ZLIB_VERSION=1.2.11
RUN echo "Building zlib" && \
    cd /tmp && \
    curl -fLO "http://zlib.net/zlib-$ZLIB_VERSION.tar.gz" && \
    tar xzf "zlib-$ZLIB_VERSION.tar.gz" && cd "zlib-$ZLIB_VERSION" && \
    CC=x86_64-linux-musl-gcc ./configure --static --prefix=/usr/local/musl && \
    make && make install && \
    rm -r /tmp/*

ENV PKG_CONFIG_ALLOW_CROSS=true \
    PKG_CONFIG_ALL_STATIC=true \
    X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_DIR=/usr/local/musl/ \
    X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_STATIC=1 \
    LIBZ_SYS_STATIC=1 \
    PLATFORM_LDFLAGS="-static-libstdc++ -static-libgcc"

# installing latest gflags, a rocksdb dependency
RUN cd /tmp && \
    git clone https://github.com/gflags/gflags.git && \
    cd gflags && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=0 -DGFLAGS_INSTALL_STATIC_LIBS=1 .. && \
    make install && \
    cd /tmp && \
    rm -R /tmp/gflags/

# Install static -fPIC Rocksdb
RUN echo "Building rocksdb" && \
    cd /tmp && \
    git clone https://github.com/facebook/rocksdb.git && \
    cd rocksdb && \
    git checkout v6.19.3 && \
    PORTABLE=1 CCFLAGS=-fPIC CXXFLAGS=-fPIC \
    CC=x86_64-linux-musl-gcc CXX=x86_64-linux-musl-g++ \
    make static_lib && \
    mkdir -p /usr/local/rocksdb/x86_64-linux-musl/lib && \
    mkdir /usr/local/rocksdb/x86_64-linux-musl/include && \
    cp librocksdb.a* /usr/local/rocksdb/x86_64-linux-musl/lib && \
    cp -r include /usr/local/rocksdb/x86_64-linux-musl/ && \
    cp -r include/* /usr/include/x86_64-linux-musl/ && \
    rm -R /tmp/rocksdb/

# Install static -fPIC Rocksdb
RUN echo "Building rocksdb" && \
    cd /tmp && \
    git clone https://github.com/facebook/rocksdb.git && \
    cd rocksdb && \
    git checkout v6.19.3 && \
    PORTABLE=1 CCFLAGS=-fPIC CXXFLAGS=-fPIC \
    CC=aarch64-linux-musl-gcc CXX=aarch64-linux-musl-g++ \
    make static_lib && \
    mkdir -p /usr/local/rocksdb/aarch64-linux-musl/lib && \
    mkdir /usr/local/rocksdb/aarch64-linux-musl/include && \
    cp librocksdb.a* /usr/local/rocksdb/aarch64-linux-musl/lib && \
    cp -r include /usr/local/rocksdb/aarch64-linux-musl/ && \
    cp -r include/* /usr/include/aarch64-linux-musl/ && \
    rm -R /tmp/rocksdb/

RUN unmunch /usr/share/hunspell/en_GB.dic /usr/share/hunspell/en_GB.aff | grep -v "'s" > /dict.txt

RUN apt update -y && apt install -y linux-perf
RUN cargo install flamegraph

CMD ["bash"]
